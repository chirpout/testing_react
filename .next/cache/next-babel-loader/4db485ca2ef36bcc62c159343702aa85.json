{"ast":null,"code":"var _jsxFileName = \"/Users/geru/Desktop/testing_react/pages/report.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport DefaultLayout from '../components/DefaultLayout';\nimport { Container } from 'reactstrap';\nimport Winterfell from 'winterfell';\nimport schema from './schema.json';\n\nconst ReportIntroduction = () => {\n  return __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    className: \"display-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"Report a workplace concern\"), __jsx(\"p\", {\n    className: \"lead\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"How it works:...\"), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, __jsx(MyComp, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  })));\n};\n\nconst originalSchema = {\n  title: 'Location',\n  type: 'object',\n  properties: {\n    location: {\n      type: 'string',\n      title: 'Where do you live?',\n      enum: ['us', 'nordic', 'other'],\n      enumNames: ['US', 'Nordic country', 'Other']\n    },\n    state: {\n      type: 'string',\n      title: 'State',\n      enum: ['AL', 'AK', 'AZ'],\n      enumNames: ['Alabama', 'Alaska', 'Arizona']\n    },\n    nordicCountry: {\n      type: 'string',\n      title: 'Country',\n      enum: ['de', 'fi', 'is', 'no', 'sv'],\n      enumNames: ['brandon', 'Finland', 'Iceland', 'Norway', 'Sweden']\n    },\n    region: {\n      type: 'string',\n      title: 'Region'\n    },\n    country: {\n      type: 'string',\n      title: 'Country'\n    },\n    city: {\n      type: 'string',\n      title: 'City'\n    }\n  }\n};\nconst originalUISchema = {\n  'ui:order': ['location', 'state', 'nordicCountry', 'country', 'region', 'city'],\n  location: {\n    'ui:widget': 'radio',\n    'ui:options': {\n      inline: true\n    },\n    classNames: 'col-xs-12'\n  },\n  state: {\n    // Show state options only if \"US\" was selected\n    condition: 'location=us',\n    classNames: 'col-xs-6'\n  },\n  nordicCountry: {\n    // Show list of Nordic countries if \"Nordic country\" was selected\n    condition: 'location=nordic',\n    'ui:widget': 'radio',\n    classNames: 'col-xs-6'\n  },\n  country: {\n    // Show regular text field for other countries\n    condition: 'location=other',\n    classNames: 'col-xs-6'\n  },\n  city: {\n    // Show city field for all countries but only if a location selection\n    // has been made, i.e. not initially. (It would be nice to be able to\n    // location!=\"\" or something).\n    condition: 'location=us,nordic,other',\n    classNames: 'col-xs-6'\n  },\n  region: {\n    // Show region field for all non-US countries, expect Iceland\n    // if it was selected from the Nordic country list.\n    condition: 'location=other||nordicCountry=fi,de,no,sv',\n    classNames: 'col-xs-6'\n  }\n};\nconst originalFormData = {}; // Process the initial state for the form.\n// Without this step, all fields would be shown initially.\n\nconst initialState = processForm(originalSchema, originalUISchema, originalSchema, originalUISchema, originalFormData);\nconst Form = JSONSchemaForm.default;\n\nclass MyComp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n  }\n\n  handleChange(data) {\n    const schema = _objectSpread({}, this.state.schema);\n\n    const uiSchema = _objectSpread({}, this.state.uiSchema);\n\n    const {\n      formData\n    } = data;\n    const newState = processForm(originalSchema, originalUISchema, schema, uiSchema, formData);\n    this.setState(newState);\n  }\n\n  render() {\n    return __jsx(Form, {\n      schema: this.state.schema,\n      uiSchema: this.state.uiSchema,\n      formData: this.state.formData,\n      onChange: this.handleChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction processForm(originalSchema, originalUISchema, schema, uiSchema, formData) {\n  let newSchema, newUISchema, newFormData;\n\n  let conditionalFields = _.pickBy(uiSchema, field => field.hasOwnProperty('condition'));\n\n  if (_.isEmpty(conditionalFields)) {\n    return {\n      schema,\n      uiSchema,\n      formData\n    };\n  }\n\n  newSchema = _.assign({}, schema);\n  newUISchema = _.assign({}, uiSchema);\n  newFormData = _.assign({}, formData);\n\n  _.each(conditionalFields, (dependantSchema, dependant) => {\n    const {\n      rules,\n      allHaveToMatch\n    } = getConditionRules(dependantSchema.condition);\n    let matches = [];\n\n    _.each(rules, rule => {\n      const {\n        field,\n        values: stringValues,\n        invert\n      } = getConditionRule(rule);\n      let visible = invert;\n      const values = stringValues.map(value => {\n        if (value === 'true') {\n          value = true;\n        } else if (value === 'false') {\n          value = false;\n        }\n\n        return value;\n      });\n\n      if (field && newFormData.hasOwnProperty(field)) {\n        let currentValues = _.isArray(newFormData[field]) ? newFormData[field] : [newFormData[field]];\n\n        _.each(values, value => {\n          if (invert) {\n            visible = visible && _.indexOf(currentValues, value) === -1;\n          } else {\n            visible = visible || _.indexOf(currentValues, value) !== -1;\n          }\n        });\n      }\n\n      matches.push(visible);\n    }); // Add or remove conditional field from schema\n\n\n    let shouldBeVisible = false;\n\n    if (matches.length) {\n      shouldBeVisible = allHaveToMatch // foo=bar && bar=foo\n      ? _.every(matches, Boolean) // foo=bar || bar=foo\n      : _.some(matches, Boolean);\n    }\n\n    if (shouldBeVisible) {\n      newSchema.properties[dependant] = originalSchema.properties[dependant];\n    } else {\n      newSchema.properties = _.omit(newSchema.properties, [dependant]);\n      newFormData = _.omit(newFormData, [dependant]);\n    }\n  }); // Update UI Schema UI order\n  // react-jsonschema-form cannot handle extra properties found in UI order\n\n\n  newUISchema['ui:order'] = _.intersection(originalUISchema['ui:order'], _.keys(newSchema.properties)); // Update Schema required fields\n\n  if (originalSchema.hasOwnProperty('required')) {\n    newSchema.required = _.intersection(originalSchema.required, _.keys(newSchema.properties));\n  }\n\n  return {\n    schema: newSchema,\n    uiSchema: newUISchema,\n    formData: newFormData\n  };\n}\n\nfunction getConditionRules(condition = '') {\n  let rules = [];\n  let allHaveToMatch = false;\n  let visible = false; // foo=bar || bar=foo\n\n  if (condition.indexOf('||') !== -1) {\n    rules = condition.split('||');\n    allHaveToMatch = false;\n    visible = false;\n  } // foo=bar && bar=foo\n  else if (condition.indexOf('&&') !== -1) {\n      rules = condition.split('&&');\n      allHaveToMatch = true;\n      visible = true;\n    } // foo=bar\n    else {\n        rules = [condition];\n        allHaveToMatch = true;\n        visible = true;\n      }\n\n  return {\n    rules,\n    allHaveToMatch,\n    visible\n  };\n}\n\nfunction getConditionRule(conditionRule) {\n  let rule = [];\n  let invert; // foo!=bar\n\n  if (conditionRule.indexOf('!=') !== -1) {\n    rule = conditionRule.split('!=');\n    invert = true;\n  } // foo=bar\n  else if (conditionRule.indexOf('=') !== -1) {\n      rule = conditionRule.split('=');\n      invert = false;\n    }\n\n  if (rule.length !== 2) {\n    return false;\n  }\n\n  let [field, values] = rule;\n  values = values.split(',');\n  return {\n    field,\n    values,\n    invert\n  };\n}\n\nexport default function Report() {\n  return __jsx(DefaultLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282\n    },\n    __self: this\n  }, __jsx(ReportIntroduction, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/geru/Desktop/testing_react/pages/report.js"],"names":["DefaultLayout","Container","Winterfell","schema","ReportIntroduction","originalSchema","title","type","properties","location","enum","enumNames","state","nordicCountry","region","country","city","originalUISchema","inline","classNames","condition","originalFormData","initialState","processForm","Form","JSONSchemaForm","default","MyComp","React","Component","constructor","props","handleChange","data","uiSchema","formData","newState","setState","render","bind","newSchema","newUISchema","newFormData","conditionalFields","_","pickBy","field","hasOwnProperty","isEmpty","assign","each","dependantSchema","dependant","rules","allHaveToMatch","getConditionRules","matches","rule","values","stringValues","invert","getConditionRule","visible","map","value","currentValues","isArray","indexOf","push","shouldBeVisible","length","every","Boolean","some","omit","intersection","keys","required","split","conditionRule","Report"],"mappings":"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","sourcesContent":["import DefaultLayout from '../components/DefaultLayout';\nimport { Container } from 'reactstrap';\nimport Winterfell from 'winterfell';\nimport schema from './schema.json';\n\nconst ReportIntroduction = () => {\n    return (\n        <Container>\n            <h1 className=\"display-3\">Report a workplace concern</h1>\n            <p className=\"lead\">How it works:...</p>\n            <div>\n                <MyComp />\n            </div>\n        </Container>\n    );\n}\n\nconst originalSchema = {\n\ttitle: 'Location',\n  type: 'object',\n  properties: {\n    location: {\n      type: 'string',\n      title: 'Where do you live?',\n      enum: ['us', 'nordic', 'other'],\n      enumNames: ['US', 'Nordic country', 'Other']\n    },\n    state: {\n      type: 'string',\n      title: 'State',\n      enum: ['AL', 'AK', 'AZ'],\n      enumNames: ['Alabama', 'Alaska', 'Arizona']\n    },\n    nordicCountry: {\n      type: 'string',\n      title: 'Country',\n      enum: ['de', 'fi', 'is', 'no', 'sv'],\n      enumNames: ['brandon', 'Finland', 'Iceland', 'Norway', 'Sweden']\n    },\n    region: {\n    \ttype: 'string',\n      title: 'Region'\n    },\n    country: {\n      type: 'string',\n      title: 'Country'\n    },\n    city: {\n      type: 'string',\n      title: 'City'\n    }\n  }\n};\nconst originalUISchema = {\n  'ui:order': ['location', 'state', 'nordicCountry', 'country', 'region', 'city'],\n  location: {\n    'ui:widget': 'radio',\n    'ui:options': {\n    \tinline: true\n    },\n    classNames: 'col-xs-12'\n  },\n  state: {\n  \t// Show state options only if \"US\" was selected\n    condition: 'location=us',\n    classNames: 'col-xs-6'\n  },\n  nordicCountry: {\n    // Show list of Nordic countries if \"Nordic country\" was selected\n    condition: 'location=nordic',\n    'ui:widget': 'radio',\n    classNames: 'col-xs-6'\n  },\n  country: {\n    // Show regular text field for other countries\n    condition: 'location=other',\n    classNames: 'col-xs-6'\n  },\n  city: {\n    // Show city field for all countries but only if a location selection\n    // has been made, i.e. not initially. (It would be nice to be able to\n    // location!=\"\" or something).\n    condition: 'location=us,nordic,other',\n    classNames: 'col-xs-6'\n  },\n  region: {\n    // Show region field for all non-US countries, expect Iceland\n    // if it was selected from the Nordic country list.\n    condition: 'location=other||nordicCountry=fi,de,no,sv',\n    classNames: 'col-xs-6'\n  },\n};\nconst originalFormData = {};\n\n// Process the initial state for the form.\n// Without this step, all fields would be shown initially.\nconst initialState = processForm(originalSchema, originalUISchema, originalSchema, originalUISchema, originalFormData);\n\nconst Form = JSONSchemaForm.default;\n\nclass MyComp extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = initialState;\n    }\n\n    handleChange (data) {\n        const schema = { ...this.state.schema };\n        const uiSchema = { ...this.state.uiSchema };\n        const { formData } = data;\n\n        const newState = processForm(originalSchema, originalUISchema, schema, uiSchema, formData);\n\n        this.setState(newState);\n    }\n\n    render () {\n        return (<Form\n                schema={this.state.schema}\n                uiSchema={this.state.uiSchema}\n                formData={this.state.formData}\n                onChange={this.handleChange.bind(this)}\n            />);\n    }\n}\n\nfunction processForm (originalSchema, originalUISchema, schema, uiSchema, formData) {\n    let newSchema, newUISchema, newFormData;\n\n    let conditionalFields = _.pickBy(uiSchema, (field) => field.hasOwnProperty('condition'));\n\n    if (_.isEmpty(conditionalFields)) {\n        return {\n            schema,\n            uiSchema,\n            formData\n        };\n    }\n\n    newSchema = _.assign({}, schema);\n    newUISchema = _.assign({}, uiSchema);\n    newFormData = _.assign({}, formData);\n\n    _.each(conditionalFields, (dependantSchema, dependant) => {\n        const { rules, allHaveToMatch } = getConditionRules(dependantSchema.condition);\n        let matches = [];\n        _.each(rules, (rule) => {\n            const { field, values: stringValues, invert } = getConditionRule(rule);\n            let visible = invert;\n\n            const values = stringValues.map(value => {\n                if (value === 'true') {\n                  \tvalue = true;\n                } else if (value === 'false') {\n                  \tvalue = false;\n                }\n                return value;\n            });\n\n\t\t\t\t\t\tif (field && newFormData.hasOwnProperty(field)) {\n                let currentValues = _.isArray(newFormData[field])\n                \t\t? newFormData[field]\n                    : [ newFormData[field] ];\n                _.each(values, (value) => {\n                    if (invert) {\n                      \tvisible = visible && _.indexOf(currentValues, value) === -1;\n                    }\n                    else {\n                        visible = visible || _.indexOf(currentValues, value) !== -1;\n                    }\n                });\n            }\n\n            matches.push(visible);\n        });\n\n        // Add or remove conditional field from schema\n        let shouldBeVisible = false;\n        if (matches.length) {\n            shouldBeVisible = allHaveToMatch\n                // foo=bar && bar=foo\n                ? _.every(matches, Boolean)\n                // foo=bar || bar=foo\n                : _.some(matches, Boolean);\n        }\n\n        if (shouldBeVisible) {\n            newSchema.properties[dependant] = originalSchema.properties[dependant];\n        } else {\n            newSchema.properties = _.omit(newSchema.properties, [dependant]);\n            newFormData = _.omit(newFormData, [dependant]);\n        }\n    });\n\n    // Update UI Schema UI order\n    // react-jsonschema-form cannot handle extra properties found in UI order\n    newUISchema['ui:order'] = _.intersection(\n        originalUISchema['ui:order'],\n        _.keys(newSchema.properties)\n    );\n    // Update Schema required fields\n    if (originalSchema.hasOwnProperty('required')) {\n        newSchema.required = _.intersection(\n            originalSchema.required,\n            _.keys(newSchema.properties)\n        );\n    }\n\n    return {\n        schema: newSchema,\n        uiSchema: newUISchema,\n        formData: newFormData\n    };\n}\n\nfunction getConditionRules (condition = '') {\n    let rules = [];\n    let allHaveToMatch = false;\n    let visible = false;\n\n    // foo=bar || bar=foo\n    if (condition.indexOf('||') !== -1) {\n        rules = condition.split('||');\n        allHaveToMatch = false;\n        visible = false;\n    }\n    // foo=bar && bar=foo\n    else if (condition.indexOf('&&') !== -1) {\n        rules = condition.split('&&');\n        allHaveToMatch = true;\n        visible = true;\n    }\n    // foo=bar\n    else {\n        rules = [condition];\n        allHaveToMatch = true;\n        visible = true;\n    }\n\n    return {\n        rules,\n        allHaveToMatch,\n        visible\n    };\n}\n\nfunction getConditionRule (conditionRule) {\n    let rule = []\n    let invert;\n\n    // foo!=bar\n    if (conditionRule.indexOf('!=') !== -1) {\n        rule = conditionRule.split('!=');\n        invert = true;\n    }\n    // foo=bar\n    else if (conditionRule.indexOf('=') !== -1) {\n        rule = conditionRule.split('=');\n        invert = false;\n    }\n\n    if (rule.length !== 2) {\n        return false;\n    }\n\n    let [field, values] = rule;\n\n    values = values.split(',');\n\n    return {\n        field,\n        values,\n        invert\n    };\n}\n\n\n\n\nexport default function Report() {\n    return (\n        <DefaultLayout>\n            <ReportIntroduction>\n            </ReportIntroduction>\n        </DefaultLayout>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}